//
//  main.swift
//  USDConverter
//
//  Created by Emma Alyx Wunder on 27.11.21.
//  Copyright Â© 2021 Emma Alyx Wunder. All rights reserved.
//

import Foundation
import ArgumentParser

struct Main: ParsableCommand {
	static var configuration = CommandConfiguration(
		abstract: "usdconv v\(USDConverter.version)",
		discussion: "Specify one or more .usdz files (.scn and .scnz files have experimental support as well) to generate .obj/.mtl files next to them."
	)

	@Flag(name: .shortAndLong, help: "Show the version number and exit.")
	var version: Bool = false

	@Flag(name: .long, help: "Convert all texture formats to PNG.")
	var png: Bool = false

	@Flag(name: .long, help: "Try to force conversion, even if the input format is unsupported.")
	var force: Bool = false

	@Flag(name: .long, help: "Keep initial files generated by Model I/O.")
	var includeGarbage: Bool = false

	@Argument(help: "The input file(s).", completion: .file())
	var input: [String] = [""] // give default value so --version can work

	mutating func run() throws {
		guard let fullVersion = USDConverter.fullVersion else {
			print("Couldn't determine path to binary")
			Darwin.exit(1)
		}

		print(fullVersion)

		if self.version {
			return
		}

		print("".padding(toLength: fullVersion.count, withPad: "-", startingAt: 0))

		guard self.input.filter({$0.trimmingCharacters(in: .whitespaces).isEmpty}).isEmpty else {
			print("Error: Specify at least one input file")
			Darwin.exit(1)
		}

		USDConverter.run(inputFiles: self.input, convertToPNG: self.png, forceConversion: self.force, includeGarbage: self.includeGarbage)
	}
}

Main.main()
